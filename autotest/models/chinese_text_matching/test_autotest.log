2019-05-26 07:16:07,543 DEBUG ModelConf.py load_from_file 128: Prepare dir for: ./autotest/models/chinese_text_matching/predict.tsv
2019-05-26 07:16:07,709 INFO ModelConf.py load_from_file 352: Activating CPU mode
2019-05-26 07:16:07,709 DEBUG ModelConf.py __init__ 45: Print ModelConf below:
2019-05-26 07:16:07,709 DEBUG ModelConf.py __init__ 46: ================================================================================
2019-05-26 07:16:07,709 DEBUG ModelConf.py __init__ 50: phase: test
2019-05-26 07:16:07,709 DEBUG ModelConf.py __init__ 50: conf_path: autotest/conf/conf_chinese_text_matching_emb_char_autotest.json
2019-05-26 07:16:07,709 DEBUG ModelConf.py __init__ 50: params: Namespace(batch_size=None, conf_path='autotest/conf/conf_chinese_text_matching_emb_char_autotest.json', debug=False, disable_log_file=False, force=True, log_dir=None, mode='normal', predict_output_path=None, previous_model_path=None, test_data_path=None)
2019-05-26 07:16:07,709 DEBUG ModelConf.py __init__ 50: mode: normal
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: conf: {'license': 'Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.', 'tool_version': '1.1.0', 'model_description': 'This model is used for model compression', 'language': 'Chinese', 'inputs': {'use_cache': True, 'dataset_type': 'classification', 'data_paths': {'train_data_path': './dataset/chinese_text_matching/train.tsv', 'valid_data_path': './dataset/chinese_text_matching/dev.tsv', 'test_data_path': './dataset/chinese_text_matching/test.tsv', 'predict_data_path': './dataset/chinese_text_matching/test.tsv', 'pre_trained_emb': './dataset/chinese_word_vectors/sgns.merge.word'}, 'add_start_end_for_seq': True, 'file_header': {'query_text': 0, 'passage_text': 1, 'label': 2}, 'predict_file_header': {'query_text': 0, 'passage_text': 1, 'label': 2}, 'model_inputs': {'query': ['query_text', 'query_char'], 'passage': ['passage_text', 'passage_char']}, 'target': ['label']}, 'outputs': {'save_base_dir': './autotest/models/chinese_text_matching/', 'model_name': 'model.nb', 'train_log_name': 'train_autotest.log', 'test_log_name': 'test_autotest.log', 'predict_log_name': 'predict.log', 'predict_fields': ['prediction'], 'predict_output_name': 'predict.tsv', 'cache_dir': '.cache.chinese_text_matching/'}, 'training_params': {'vocabulary': {'min_word_frequency': 1}, 'optimizer': {'name': 'SGD', 'params': {'lr': 0.2, 'momentum': 0.9, 'nesterov': True}}, 'lr_decay': 0.95, 'minimum_lr': 0.005, 'epoch_start_lr_decay': 1, 'use_gpu': True, 'batch_size': 64, 'batch_num_to_show_results': 100, 'max_epoch': 20, 'valid_times_per_epoch': 1, 'max_lengths': {'query': 40, 'passage': 80}}, 'architecture': [{'layer': 'Embedding', 'conf': {'word': {'cols': ['query_text', 'passage_text'], 'dim': 300, 'fix_weight': True}, 'char': {'cols': ['query_char', 'passage_char'], 'type': 'CNNCharEmbedding', 'dropout': 0.2, 'dim': 150, 'embedding_matrix_dim': 50, 'stride': 1, 'window_size': 3, 'activation': None}}}, {'layer_id': 'query_dropout', 'layer': 'Dropout', 'conf': {'dropout': 0}, 'inputs': ['query']}, {'layer_id': 'passage_dropout', 'layer': 'Dropout', 'conf': {'dropout': 0}, 'inputs': ['passage']}, {'layer_id': 'query_1', 'layer': 'BiLSTM', 'conf': {'hidden_dim': 128, 'dropout': 0.3, 'num_layers': 3}, 'inputs': ['query_dropout']}, {'layer_id': 'passage_matched', 'layer': 'MatchAttention', 'conf': {}, 'inputs': ['passage_dropout', 'query_dropout']}, {'layer_id': 'passage_combined', 'layer': 'Combination', 'conf': {'operations': ['origin']}, 'inputs': ['passage_dropout', 'passage_matched']}, {'layer_id': 'passage_1', 'layer': 'BiLSTM', 'conf': {'hidden_dim': 128, 'dropout': 0.3, 'num_layers': 3}, 'inputs': ['passage_combined']}, {'layer_id': 'query_linear_att', 'layer': 'LinearAttention', 'conf': {'attention_weight_dim': 256, 'keep_dim': False}, 'inputs': ['query_1']}, {'layer_id': 'passage_linear_att', 'layer': 'LinearAttention', 'conf': {'attention_weight_dim': 256, 'keep_dim': False}, 'inputs': ['passage_1']}, {'layer_id': 'comb', 'layer': 'Combination', 'conf': {'operations': ['origin']}, 'inputs': ['query_linear_att', 'passage_linear_att']}, {'output_layer_flag': True, 'layer_id': 'output', 'layer': 'Linear', 'conf': {'hidden_dim': [512, -1], 'activation': 'ReLU', 'batch_norm': True, 'last_hidden_activation': False, 'last_hidden_softmax': False}, 'inputs': ['comb']}], 'loss': {'losses': [{'type': 'CrossEntropyLoss', 'conf': {'size_average': True}, 'inputs': ['output', 'label']}]}, 'metrics': ['accuracy', 'auc']}
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: tool_version: 1.1.0
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: language: chinese
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: problem_type: classification
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: use_cache: True
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: save_base_dir: ./autotest/models/chinese_text_matching/
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: previous_model_path: ./autotest/models/chinese_text_matching/model.nb
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: pretrained_model_path: ./autotest/models/chinese_text_matching/model.nb
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: saved_problem_path: ./autotest/models/chinese_text_matching/necessary_cache/problem.pkl
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: log_dir: ./autotest/models/chinese_text_matching/
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: test_log_path: ./autotest/models/chinese_text_matching/test_autotest.log
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: predict_output_path: ./autotest/models/chinese_text_matching/predict.tsv
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: predict_fields: ['prediction']
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: model_save_path: ./autotest/models/chinese_text_matching/model.nb
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: train_data_path: ./dataset/chinese_text_matching/train.tsv
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: valid_data_path: ./dataset/chinese_text_matching/dev.tsv
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: test_data_path: ./dataset/chinese_text_matching/test.tsv
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: file_columns: {'query_text': 0, 'passage_text': 1, 'label': 2}
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: answer_column_name: ['label']
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: input_types: {'word': {'cols': ['query_text', 'passage_text'], 'dim': 300, 'fix_weight': True}, 'char': {'cols': ['query_char', 'passage_char'], 'type': 'CNNCharEmbedding', 'dropout': 0.2, 'dim': 150, 'embedding_matrix_dim': 50, 'stride': 1, 'window_size': 3, 'activation': None}}
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: extra_feature: False
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: object_inputs: {'query': ['query_text', 'query_char'], 'passage': ['passage_text', 'passage_char']}
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: object_inputs_names: ['query', 'passage']
2019-05-26 07:16:07,710 DEBUG ModelConf.py __init__ 50: max_vocabulary: 800000
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: min_word_frequency: 1
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: file_with_col_header: False
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: add_start_end_for_seq: True
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: pretrained_emb_path: ./dataset/chinese_word_vectors/sgns.merge.word
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: involve_all_words_in_pretrained_emb: False
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: pretrained_emb_type: glove
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: pretrained_emb_binary_or_text: text
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: pretrained_emb_dim: 300
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: problem_path: ./autotest/models/chinese_text_matching/necessary_cache/problem.pkl
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: training_params: {'vocabulary': {'min_word_frequency': 1}, 'optimizer': {'name': 'SGD', 'params': {'lr': 0.2, 'momentum': 0.9, 'nesterov': True}}, 'lr_decay': 0.95, 'minimum_lr': 0.005, 'epoch_start_lr_decay': 1, 'use_gpu': True, 'batch_size': 64, 'batch_num_to_show_results': 100, 'max_epoch': 20, 'valid_times_per_epoch': 1, 'max_lengths': {'query': 40, 'passage': 80}}
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: batch_size_each_gpu: 64
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: lr_decay: 0.95
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: minimum_lr: 0.005
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: epoch_start_lr_decay: 1
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: max_epoch: 20
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: valid_times_per_epoch: 1
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: batch_num_to_show_results: 100
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: max_lengths: {'query': 40, 'passage': 80}
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: fixed_lengths: None
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: batch_size_total: 64
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: cpu_num_workers: -1
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: _ModelConf__text_preprocessing: []
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: DBC2SBC: False
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: unicode_fix: False
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: remove_stopwords: False
2019-05-26 07:16:07,711 DEBUG ModelConf.py __init__ 50: tokenizer: jieba
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 50: use_gpu: False
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 50: architecture: [{'layer': 'Embedding', 'conf': {'word': {'cols': ['query_text', 'passage_text'], 'dim': 300, 'fix_weight': True}, 'char': {'cols': ['query_char', 'passage_char'], 'type': 'CNNCharEmbedding', 'dropout': 0.2, 'dim': 150, 'embedding_matrix_dim': 50, 'stride': 1, 'window_size': 3, 'activation': None}}}, {'layer_id': 'query_dropout', 'layer': 'Dropout', 'conf': {'dropout': 0}, 'inputs': ['query']}, {'layer_id': 'passage_dropout', 'layer': 'Dropout', 'conf': {'dropout': 0}, 'inputs': ['passage']}, {'layer_id': 'query_1', 'layer': 'BiLSTM', 'conf': {'hidden_dim': 128, 'dropout': 0.3, 'num_layers': 3}, 'inputs': ['query_dropout']}, {'layer_id': 'passage_matched', 'layer': 'MatchAttention', 'conf': {}, 'inputs': ['passage_dropout', 'query_dropout']}, {'layer_id': 'passage_combined', 'layer': 'Combination', 'conf': {'operations': ['origin']}, 'inputs': ['passage_dropout', 'passage_matched']}, {'layer_id': 'passage_1', 'layer': 'BiLSTM', 'conf': {'hidden_dim': 128, 'dropout': 0.3, 'num_layers': 3}, 'inputs': ['passage_combined']}, {'layer_id': 'query_linear_att', 'layer': 'LinearAttention', 'conf': {'attention_weight_dim': 256, 'keep_dim': False}, 'inputs': ['query_1']}, {'layer_id': 'passage_linear_att', 'layer': 'LinearAttention', 'conf': {'attention_weight_dim': 256, 'keep_dim': False}, 'inputs': ['passage_1']}, {'layer_id': 'comb', 'layer': 'Combination', 'conf': {'operations': ['origin']}, 'inputs': ['query_linear_att', 'passage_linear_att']}, {'output_layer_flag': True, 'layer_id': 'output', 'layer': 'Linear', 'conf': {'hidden_dim': [512, -1], 'activation': 'ReLU', 'batch_norm': True, 'last_hidden_activation': False, 'last_hidden_softmax': False}, 'inputs': ['comb']}]
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 50: output_layer_id: ['output']
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 50: min_sentence_len: 0
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 50: loss: {'losses': [{'type': 'CrossEntropyLoss', 'conf': {'size_average': True}, 'inputs': ['output', 'label']}], 'multiLoss': False}
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 50: metrics: ['accuracy', 'auc']
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 50: pos_label: None
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 50: metrics_post_check: set()
2019-05-26 07:16:07,712 DEBUG ModelConf.py __init__ 51: ================================================================================
2019-05-26 07:16:07,730 DEBUG common_utils.py load_from_pkl 41: ./autotest/models/chinese_text_matching/necessary_cache/problem.pkl loaded!
2019-05-26 07:16:07,731 DEBUG CellDict.py load_cell_dict 211: Cell dict loaded
2019-05-26 07:16:07,731 DEBUG problem.py load_problem 808: Problem loaded
2019-05-26 07:16:07,731 INFO test.py main 42: Problem loaded!
2019-05-26 07:16:07,731 DEBUG test.py main 43: Problem loaded from ./autotest/models/chinese_text_matching/necessary_cache/problem.pkl
2019-05-26 07:16:07,731 DEBUG LearningMachine.py __init__ 57: Postive label (target index): 1
2019-05-26 07:16:07,921 INFO LearningMachine.py load_model 751: Model ./autotest/models/chinese_text_matching/model.nb loaded!
2019-05-26 07:16:07,922 INFO LearningMachine.py load_model 752: Total trainable parameters: 3697864
2019-05-26 07:16:07,922 INFO test.py main 70: Testing the best model saved at ./autotest/models/chinese_text_matching/model.nb, with ./dataset/chinese_text_matching/test.tsv
2019-05-26 07:16:10,386 INFO problem.py encode 684: ./dataset/chinese_text_matching/test.tsv: 100 legal samples, 0 illegal samples
2019-05-26 07:16:10,386 INFO LearningMachine.py evaluate 386: Starting test ...
2019-05-26 07:16:10,387 INFO corpus_utils.py get_batches 235: Start making batches
2019-05-26 07:16:10,413 INFO corpus_utils.py get_batches 395: Batches got!
2019-05-26 07:16:11,844 INFO LearningMachine.py evaluate 580: test accuracy: 0.700000; auc: 0.486667 loss: 1.282889
