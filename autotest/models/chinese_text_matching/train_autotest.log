2019-05-27 00:21:50,065 DEBUG ModelConf.py load_from_file 129: Prepare dir for: ./autotest/models/chinese_text_matching/predict.tsv
2019-05-27 00:21:50,223 INFO ModelConf.py load_from_file 353: Activating CPU mode
2019-05-27 00:21:50,224 DEBUG ModelConf.py __init__ 46: Print ModelConf below:
2019-05-27 00:21:50,224 DEBUG ModelConf.py __init__ 47: ================================================================================
2019-05-27 00:21:50,224 DEBUG ModelConf.py __init__ 51: phase: train
2019-05-27 00:21:50,224 DEBUG ModelConf.py __init__ 51: conf_path: autotest/conf/conf_chinese_text_matching_emb_char_autotest.json
2019-05-27 00:21:50,224 DEBUG ModelConf.py __init__ 51: params: Namespace(batch_size=None, cache_dir=None, conf_path='autotest/conf/conf_chinese_text_matching_emb_char_autotest.json', debug=False, disable_log_file=False, force=True, involve_all_words_in_pretrained_emb=False, learning_rate=None, log_dir=None, make_cache_only=False, max_epoch=None, mode='normal', model_save_dir=None, predict_output_path=None, pretrained_emb_binary_or_text='text', pretrained_emb_path=None, pretrained_emb_type='glove', pretrained_model_path=None, test_data_path=None, train_data_path=None, valid_data_path=None)
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: mode: normal
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: conf: {'license': 'Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.', 'tool_version': '1.1.0', 'model_description': 'This model is used for model compression', 'language': 'Chinese', 'inputs': {'use_cache': True, 'dataset_type': 'classification', 'data_paths': {'train_data_path': './dataset/chinese_text_matching/train.tsv', 'valid_data_path': './dataset/chinese_text_matching/dev.tsv', 'test_data_path': './dataset/chinese_text_matching/test.tsv', 'predict_data_path': './dataset/chinese_text_matching/test.tsv', 'pre_trained_emb': './dataset/chinese_word_vectors/sgns.merge.word'}, 'add_start_end_for_seq': True, 'file_header': {'query_text': 0, 'passage_text': 1, 'label': 2}, 'predict_file_header': {'query_text': 0, 'passage_text': 1, 'label': 2}, 'model_inputs': {'query': ['query_text', 'query_char'], 'passage': ['passage_text', 'passage_char']}, 'target': ['label']}, 'outputs': {'save_base_dir': './autotest/models/chinese_text_matching/', 'model_name': 'model.nb', 'train_log_name': 'train_autotest.log', 'test_log_name': 'test_autotest.log', 'predict_log_name': 'predict.log', 'predict_fields': ['prediction'], 'predict_output_name': 'predict.tsv', 'cache_dir': '.cache.chinese_text_matching/'}, 'training_params': {'vocabulary': {'min_word_frequency': 1}, 'optimizer': {'name': 'SGD', 'params': {'lr': 0.2, 'momentum': 0.9, 'nesterov': True}}, 'lr_decay': 0.95, 'minimum_lr': 0.005, 'epoch_start_lr_decay': 1, 'use_gpu': True, 'batch_size': 64, 'batch_num_to_show_results': 100, 'max_epoch': 20, 'valid_times_per_epoch': 1, 'max_lengths': {'query': 40, 'passage': 80}}, 'architecture': [{'layer': 'Embedding', 'conf': {'word': {'cols': ['query_text', 'passage_text'], 'dim': 300, 'fix_weight': True}, 'char': {'cols': ['query_char', 'passage_char'], 'type': 'CNNCharEmbedding', 'dropout': 0.2, 'dim': 150, 'embedding_matrix_dim': 50, 'stride': 1, 'window_size': 3, 'activation': None}}}, {'layer_id': 'query_dropout', 'layer': 'Dropout', 'conf': {'dropout': 0}, 'inputs': ['query']}, {'layer_id': 'passage_dropout', 'layer': 'Dropout', 'conf': {'dropout': 0}, 'inputs': ['passage']}, {'layer_id': 'query_1', 'layer': 'BiLSTM', 'conf': {'hidden_dim': 128, 'dropout': 0.3, 'num_layers': 3}, 'inputs': ['query_dropout']}, {'layer_id': 'passage_matched', 'layer': 'MatchAttention', 'conf': {}, 'inputs': ['passage_dropout', 'query_dropout']}, {'layer_id': 'passage_combined', 'layer': 'Combination', 'conf': {'operations': ['origin']}, 'inputs': ['passage_dropout', 'passage_matched']}, {'layer_id': 'passage_1', 'layer': 'BiLSTM', 'conf': {'hidden_dim': 128, 'dropout': 0.3, 'num_layers': 3}, 'inputs': ['passage_combined']}, {'layer_id': 'query_linear_att', 'layer': 'LinearAttention', 'conf': {'attention_weight_dim': 256, 'keep_dim': False}, 'inputs': ['query_1']}, {'layer_id': 'passage_linear_att', 'layer': 'LinearAttention', 'conf': {'attention_weight_dim': 256, 'keep_dim': False}, 'inputs': ['passage_1']}, {'layer_id': 'comb', 'layer': 'Combination', 'conf': {'operations': ['origin']}, 'inputs': ['query_linear_att', 'passage_linear_att']}, {'output_layer_flag': True, 'layer_id': 'output', 'layer': 'Linear', 'conf': {'hidden_dim': [512, -1], 'activation': 'ReLU', 'batch_norm': True, 'last_hidden_activation': False, 'last_hidden_softmax': False}, 'inputs': ['comb']}], 'loss': {'losses': [{'type': 'CrossEntropyLoss', 'conf': {'size_average': True}, 'inputs': ['output', 'label']}]}, 'metrics': ['accuracy', 'auc']}
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: tool_version: 1.1.0
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: language: chinese
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: problem_type: classification
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: tagging_scheme: None
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: use_cache: True
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: save_base_dir: ./autotest/models/chinese_text_matching/
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: pretrained_model_path: None
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: previous_model_path: None
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: log_dir: ./autotest/models/chinese_text_matching/
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: train_log_path: ./autotest/models/chinese_text_matching/train_autotest.log
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: predict_output_path: ./autotest/models/chinese_text_matching/predict.tsv
2019-05-27 00:21:50,225 DEBUG ModelConf.py __init__ 51: predict_fields: ['prediction']
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: model_save_path: ./autotest/models/chinese_text_matching/model.nb
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: train_data_path: ./dataset/chinese_text_matching/train.tsv
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: valid_data_path: ./dataset/chinese_text_matching/dev.tsv
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: test_data_path: ./dataset/chinese_text_matching/test.tsv
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: file_columns: {'query_text': 0, 'passage_text': 1, 'label': 2}
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: answer_column_name: ['label']
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: input_types: {'word': {'cols': ['query_text', 'passage_text'], 'dim': 300, 'fix_weight': True}, 'char': {'cols': ['query_char', 'passage_char'], 'type': 'CNNCharEmbedding', 'dropout': 0.2, 'dim': 150, 'embedding_matrix_dim': 50, 'stride': 1, 'window_size': 3, 'activation': None}}
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: extra_feature: False
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: object_inputs: {'query': ['query_text', 'query_char'], 'passage': ['passage_text', 'passage_char']}
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: object_inputs_names: ['query', 'passage']
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: max_vocabulary: 800000
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: min_word_frequency: 1
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: file_with_col_header: False
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: add_start_end_for_seq: True
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: pretrained_emb_path: ./dataset/chinese_word_vectors/sgns.merge.word
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: involve_all_words_in_pretrained_emb: False
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: pretrained_emb_type: glove
2019-05-27 00:21:50,226 DEBUG ModelConf.py __init__ 51: pretrained_emb_binary_or_text: text
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: pretrained_emb_dim: 300
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: cache_dir: .cache.chinese_text_matching/
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: problem_path: .cache.chinese_text_matching/problem.pkl
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: emb_pkl_path: .cache.chinese_text_matching/emb.pkl
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: training_params: {'vocabulary': {'min_word_frequency': 1}, 'optimizer': {'name': 'SGD', 'params': {'lr': 0.2, 'momentum': 0.9, 'nesterov': True}}, 'lr_decay': 0.95, 'minimum_lr': 0.005, 'epoch_start_lr_decay': 1, 'use_gpu': True, 'batch_size': 64, 'batch_num_to_show_results': 100, 'max_epoch': 20, 'valid_times_per_epoch': 1, 'max_lengths': {'query': 40, 'passage': 80}}
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: optimizer_name: SGD
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: optimizer_params: {'lr': 0.2, 'momentum': 0.9, 'nesterov': True}
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: clip_grad_norm_max_norm: 5
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: batch_size_each_gpu: 64
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: lr_decay: 0.95
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: minimum_lr: 0.005
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: epoch_start_lr_decay: 1
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: max_epoch: 20
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: valid_times_per_epoch: 1
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: batch_num_to_show_results: 100
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: max_lengths: {'query': 40, 'passage': 80}
2019-05-27 00:21:50,227 DEBUG ModelConf.py __init__ 51: fixed_lengths: None
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: batch_size_total: 64
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: cpu_num_workers: -1
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: _ModelConf__text_preprocessing: []
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: DBC2SBC: False
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: unicode_fix: False
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: remove_stopwords: False
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: tokenizer: jieba
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: use_gpu: False
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: architecture: [{'layer': 'Embedding', 'conf': {'word': {'cols': ['query_text', 'passage_text'], 'dim': 300, 'fix_weight': True}, 'char': {'cols': ['query_char', 'passage_char'], 'type': 'CNNCharEmbedding', 'dropout': 0.2, 'dim': 150, 'embedding_matrix_dim': 50, 'stride': 1, 'window_size': 3, 'activation': None}}}, {'layer_id': 'query_dropout', 'layer': 'Dropout', 'conf': {'dropout': 0}, 'inputs': ['query']}, {'layer_id': 'passage_dropout', 'layer': 'Dropout', 'conf': {'dropout': 0}, 'inputs': ['passage']}, {'layer_id': 'query_1', 'layer': 'BiLSTM', 'conf': {'hidden_dim': 128, 'dropout': 0.3, 'num_layers': 3}, 'inputs': ['query_dropout']}, {'layer_id': 'passage_matched', 'layer': 'MatchAttention', 'conf': {}, 'inputs': ['passage_dropout', 'query_dropout']}, {'layer_id': 'passage_combined', 'layer': 'Combination', 'conf': {'operations': ['origin']}, 'inputs': ['passage_dropout', 'passage_matched']}, {'layer_id': 'passage_1', 'layer': 'BiLSTM', 'conf': {'hidden_dim': 128, 'dropout': 0.3, 'num_layers': 3}, 'inputs': ['passage_combined']}, {'layer_id': 'query_linear_att', 'layer': 'LinearAttention', 'conf': {'attention_weight_dim': 256, 'keep_dim': False}, 'inputs': ['query_1']}, {'layer_id': 'passage_linear_att', 'layer': 'LinearAttention', 'conf': {'attention_weight_dim': 256, 'keep_dim': False}, 'inputs': ['passage_1']}, {'layer_id': 'comb', 'layer': 'Combination', 'conf': {'operations': ['origin']}, 'inputs': ['query_linear_att', 'passage_linear_att']}, {'output_layer_flag': True, 'layer_id': 'output', 'layer': 'Linear', 'conf': {'hidden_dim': [512, -1], 'activation': 'ReLU', 'batch_norm': True, 'last_hidden_activation': False, 'last_hidden_softmax': False}, 'inputs': ['comb']}]
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: output_layer_id: ['output']
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: min_sentence_len: 0
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: loss: {'losses': [{'type': 'CrossEntropyLoss', 'conf': {'size_average': True}, 'inputs': ['output', 'label']}], 'multiLoss': False}
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: metrics: ['accuracy', 'auc']
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: pos_label: None
2019-05-27 00:21:50,228 DEBUG ModelConf.py __init__ 51: metrics_post_check: set()
2019-05-27 00:21:50,229 DEBUG ModelConf.py __init__ 52: ================================================================================
2019-05-27 00:21:50,229 INFO train.py main 173: Preprocessing... Depending on your corpus size, this step may take a while.
2019-05-27 00:21:57,185 INFO problem.py build 295: Corpus imported: 2200 legal lines, 0 illegal lines.
2019-05-27 00:21:57,229 INFO problem.py build 300: 28150 types in word column
2019-05-27 00:21:57,234 INFO problem.py build 300: 4133 types in char column
2019-05-27 00:21:57,235 INFO problem.py build 303: 2 types in target column
2019-05-27 00:21:57,235 DEBUG problem.py build 304: training data dict built
2019-05-27 00:21:57,235 INFO problem.py build 309: Getting pre-trained embeddings...
